// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	cfforeach "github.com/mike-carey/cf-foreach"
)

type FakeCFForEach struct {
	ForEachServiceBindingToAppStub        func([]cfclient.ServiceBinding) ([]cfclient.App, []error)
	forEachServiceBindingToAppMutex       sync.RWMutex
	forEachServiceBindingToAppArgsForCall []struct {
		arg1 []cfclient.ServiceBinding
	}
	forEachServiceBindingToAppReturns struct {
		result1 []cfclient.App
		result2 []error
	}
	forEachServiceBindingToAppReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 []error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFForEach) ForEachServiceBindingToApp(arg1 []cfclient.ServiceBinding) ([]cfclient.App, []error) {
	var arg1Copy []cfclient.ServiceBinding
	if arg1 != nil {
		arg1Copy = make([]cfclient.ServiceBinding, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.forEachServiceBindingToAppMutex.Lock()
	ret, specificReturn := fake.forEachServiceBindingToAppReturnsOnCall[len(fake.forEachServiceBindingToAppArgsForCall)]
	fake.forEachServiceBindingToAppArgsForCall = append(fake.forEachServiceBindingToAppArgsForCall, struct {
		arg1 []cfclient.ServiceBinding
	}{arg1Copy})
	fake.recordInvocation("ForEachServiceBindingToApp", []interface{}{arg1Copy})
	fake.forEachServiceBindingToAppMutex.Unlock()
	if fake.ForEachServiceBindingToAppStub != nil {
		return fake.ForEachServiceBindingToAppStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.forEachServiceBindingToAppReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFForEach) ForEachServiceBindingToAppCallCount() int {
	fake.forEachServiceBindingToAppMutex.RLock()
	defer fake.forEachServiceBindingToAppMutex.RUnlock()
	return len(fake.forEachServiceBindingToAppArgsForCall)
}

func (fake *FakeCFForEach) ForEachServiceBindingToAppCalls(stub func([]cfclient.ServiceBinding) ([]cfclient.App, []error)) {
	fake.forEachServiceBindingToAppMutex.Lock()
	defer fake.forEachServiceBindingToAppMutex.Unlock()
	fake.ForEachServiceBindingToAppStub = stub
}

func (fake *FakeCFForEach) ForEachServiceBindingToAppArgsForCall(i int) []cfclient.ServiceBinding {
	fake.forEachServiceBindingToAppMutex.RLock()
	defer fake.forEachServiceBindingToAppMutex.RUnlock()
	argsForCall := fake.forEachServiceBindingToAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFForEach) ForEachServiceBindingToAppReturns(result1 []cfclient.App, result2 []error) {
	fake.forEachServiceBindingToAppMutex.Lock()
	defer fake.forEachServiceBindingToAppMutex.Unlock()
	fake.ForEachServiceBindingToAppStub = nil
	fake.forEachServiceBindingToAppReturns = struct {
		result1 []cfclient.App
		result2 []error
	}{result1, result2}
}

func (fake *FakeCFForEach) ForEachServiceBindingToAppReturnsOnCall(i int, result1 []cfclient.App, result2 []error) {
	fake.forEachServiceBindingToAppMutex.Lock()
	defer fake.forEachServiceBindingToAppMutex.Unlock()
	fake.ForEachServiceBindingToAppStub = nil
	if fake.forEachServiceBindingToAppReturnsOnCall == nil {
		fake.forEachServiceBindingToAppReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 []error
		})
	}
	fake.forEachServiceBindingToAppReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 []error
	}{result1, result2}
}

func (fake *FakeCFForEach) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.forEachServiceBindingToAppMutex.RLock()
	defer fake.forEachServiceBindingToAppMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFForEach) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfforeach.CFForEach = new(FakeCFForEach)
